---
import { getRepository, getReleases, getLatestCommits } from "../utils/github";
import { getSecret } from "astro:env/server";

// Server-side code goes here
const timestamp = new Date().toISOString();

// Get repos from env
const reposStr = getSecret("GITHUB_REPOS");
if (!reposStr) {
  throw new Error(
    "GITHUB_REPOS environment variable is not set. Please set it with a comma-separated list of repositories in format 'owner/repo'"
  );
}

const repos = reposStr.split(",").map((repo) => repo.trim());

// Get threshold from env
const thresholdStr = getSecret("RELEASE_HOURS_THRESHOLD");
const releaseHoursThreshold = thresholdStr ? parseInt(thresholdStr, 10) : 72;

// Fetch data for all repositories
const reposData = await Promise.all(
  repos.map(async (repoFullName) => {
    const [owner, repo] = repoFullName.split("/");
    if (!owner || !repo) {
      throw new Error(
        `Invalid repository format: ${repoFullName}. Expected format: owner/repo`
      );
    }
    const [repository, releases, commits] = await Promise.all([
      getRepository(owner, repo),
      getReleases(owner, repo),
      getLatestCommits(owner, repo, 50),
    ]);

    // Separate published and draft releases
    const publishedReleases = releases.filter((release) => !release.draft);
    const hasDraftRelease = releases.some((release) => release.draft);

    // Calculate time since first unreleased commit
    let timeSinceUnreleasedWork = null;
    let isMinutes = false;

    if (commits.length > 0) {
      let firstUnreleasedCommitDate = null;

      if (publishedReleases.length === 0) {
        // No releases yet, so find the first commit ever
        firstUnreleasedCommitDate = new Date(
          commits[commits.length - 1].commit.author.date
        );
      } else {
        // Find the latest release date
        const latestReleaseDate = new Date(publishedReleases[0].published_at);

        // Find commits that are after the latest release
        const unreleasedCommits = commits.filter(
          (commit) => new Date(commit.commit.author.date) > latestReleaseDate
        );

        if (unreleasedCommits.length > 0) {
          // Find the first (oldest) unreleased commit
          firstUnreleasedCommitDate = new Date(
            unreleasedCommits[unreleasedCommits.length - 1].commit.author.date
          );
        }
      }

      if (firstUnreleasedCommitDate) {
        const now = new Date();
        const diffMs = now.getTime() - firstUnreleasedCommitDate.getTime();
        const totalMinutes = Math.floor(diffMs / (1000 * 60));

        if (totalMinutes < 60) {
          timeSinceUnreleasedWork = totalMinutes;
          isMinutes = true;
        } else {
          timeSinceUnreleasedWork = Math.floor(totalMinutes / 60);
          isMinutes = false;
        }
      }
    }

    const shouldRelease =
      hasDraftRelease &&
      timeSinceUnreleasedWork !== null &&
      (isMinutes
        ? timeSinceUnreleasedWork >= releaseHoursThreshold * 60
        : timeSinceUnreleasedWork >= releaseHoursThreshold);

    const isUpToDate =
      timeSinceUnreleasedWork === null && publishedReleases.length > 0;

    return {
      repository,
      timeSinceUnreleasedWork,
      isMinutes,
      hasDraftRelease,
      releases,
      shouldRelease,
      isUpToDate,
    };
  })
);

// Sort repositories: those needing release first, then alphabetically
const sortedReposData = reposData.sort((a, b) => {
  if (a.shouldRelease && !b.shouldRelease) return -1;
  if (!a.shouldRelease && b.shouldRelease) return 1;
  if (a.isUpToDate && !b.isUpToDate) return 1;
  if (!a.isUpToDate && b.isUpToDate) return -1;
  return a.repository.full_name.localeCompare(b.repository.full_name);
});
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>GitHub Release Stats</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <main>
      <div class="ttv-header">
        <span class="ttv-header-title">GITHUB RELEASE STATS</span>
      </div>
      <div class="ttv-header-underline"></div>

      <div class="ttv-nav">
        <a href="/changelogs" class="ttv-nav-link" id="changelogs-link"
          >VIEW CHANGELOGS â†’</a
        >
      </div>

      <div class="ttv-section-label">REPOSITORY STATUS</div>

      <div class="ttv-grid">
        {
          sortedReposData.map(
            ({
              repository,
              timeSinceUnreleasedWork,
              isMinutes,
              hasDraftRelease,
              releases,
              shouldRelease,
              isUpToDate,
            }) => (
              <div
                class={`ttv-box${shouldRelease ? " ttv-box-warning" : ""}${isUpToDate ? " ttv-box-success" : ""}`}
              >
                <div class="ttv-row ttv-row-title">
                  <span class="ttv-repo-name">
                    {repository.full_name.replaceAll("/", "/\u200B")}
                  </span>
                </div>
                {!isUpToDate && (
                  <>
                    <div class="ttv-row">
                      <span class="ttv-label">
                        TIME SINCE UNRELEASED WORK STARTED:
                      </span>
                    </div>
                    <div class="ttv-row ttv-row-hours">
                      <span class="ttv-hours-value">
                        {timeSinceUnreleasedWork !== null
                          ? `${timeSinceUnreleasedWork}${isMinutes ? "m" : "h"}`
                          : releases.length === 0
                            ? "NO COMMITS YET"
                            : "ALL UP TO DATE! ðŸ˜Š"}
                      </span>
                    </div>
                  </>
                )}
                {shouldRelease && (
                  <div class="ttv-row ttv-row-warning">
                    <span class="ttv-warning">RELEASE NEEDED!</span>
                  </div>
                )}
                {isUpToDate && (
                  <div class="ttv-row ttv-row-success">
                    <span class="ttv-success">EVERYTHING RELEASED! ðŸŽ‰</span>
                  </div>
                )}
              </div>
            )
          )
        }
      </div>

      <div class="ttv-footer">
        <span class="ttv-footer-timestamp">LAST UPDATED: {timestamp}</span>
      </div>
    </main>
    <script>
      // Update navigation links with current search parameters
      const updateNavLinks = () => {
        const currentSearch = window.location.search;
        const changelogsLink = document.getElementById(
          "changelogs-link"
        ) as HTMLAnchorElement;
        if (changelogsLink) {
          changelogsLink.href = `/changelogs${currentSearch}`;
        }
      };

      // Update links on page load
      updateNavLinks();

      setTimeout(() => {
        window.location.reload();
      }, 300000); // 300,000 ms = 5 minutes
    </script>
  </body>
</html>

<style>
  :root {
    --ttv-bg: #000;
    --ttv-white: #fff;
    --ttv-yellow: #ffff00;
    --ttv-cyan: #00ffff;
    --ttv-red: #ff0000;
    --ttv-green: #00ff00;
    --ttv-box-bg: #000;
    --ttv-border: #ffff00;
    --ttv-warning-bg: #000;
    --ttv-warning-border: #ff0000;
    --ttv-warning-text: #ff0000;
    --ttv-success-bg: #000;
    --ttv-success-border: #00ff00;
    --ttv-success-text: #00ff00;
    --ttv-section-label: #00ffff;
  }

  html {
    font-size: clamp(16px, 2vw + 1vh, 32px);
  }

  body {
    background: var(--ttv-bg);
    color: var(--ttv-white);
    font-family: "Press Start 2P", "Courier New", Courier, monospace;
    margin: 0;
    padding: 0;
    font-size: 1.1rem;
  }

  main {
    max-width: 100vw;
    margin: 0 auto;
    padding: 0.5rem 0.5rem 2rem 0.5rem;
  }

  .ttv-header {
    background: var(--ttv-bg);
    color: var(--ttv-white);
    text-align: left;
    font-size: clamp(2rem, 5vw, 3.5rem);
    font-weight: bold;
    letter-spacing: 0.1em;
    padding: 0.5rem 0 0.2rem 0.5rem;
    font-family: "Press Start 2P", "Courier New", Courier, monospace;
    text-transform: uppercase;
  }
  .ttv-header-title {
    background: var(--ttv-bg);
    color: var(--ttv-white);
    padding: 0 0.5rem;
    font-family: inherit;
  }
  .ttv-header-underline {
    width: 100%;
    height: 8px;
    background: var(--ttv-red);
    margin-bottom: 0.5rem;
  }

  .ttv-section-label {
    color: var(--ttv-cyan);
    font-size: clamp(1.1rem, 2vw, 1.5rem);
    font-weight: bold;
    letter-spacing: 0.08em;
    margin: 0.5rem 0 0.5rem 0;
    padding-left: 0.2rem;
    text-transform: uppercase;
    font-family: inherit;
  }

  .ttv-nav {
    margin: 1rem 0;
    padding-left: 0.5rem;
  }
  .ttv-nav-link {
    color: var(--ttv-cyan);
    text-decoration: none;
    font-size: clamp(0.8rem, 1.5vw, 1.2rem);
    font-family: inherit;
    text-transform: uppercase;
  }
  .ttv-nav-link:hover {
    color: var(--ttv-yellow);
  }

  .ttv-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
    gap: 1.5rem;
    width: 100%;
    justify-content: center;
  }

  .ttv-box {
    background: var(--ttv-box-bg);
    border: 2px solid var(--ttv-border);
    min-width: 0;
    max-width: 100%;
    text-align: left;
    font-family: inherit;
    box-sizing: border-box;
    padding: 0.2rem 0.7rem 0.7rem 0.7rem;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    overflow-wrap: break-word;
    word-break: break-word;
  }
  .ttv-box-warning {
    border-color: var(--ttv-warning-border) !important;
    background: var(--ttv-warning-border) !important;
    color: #000 !important;
  }
  .ttv-box-warning * {
    color: #000 !important;
    background: transparent !important;
    box-shadow: none !important;
    text-shadow: none !important;
  }

  .ttv-box-success {
    border-color: var(--ttv-success-border) !important;
    background: var(--ttv-success-border) !important;
    color: #000 !important;
  }
  .ttv-box-success * {
    color: #000 !important;
    background: transparent !important;
    box-shadow: none !important;
    text-shadow: none !important;
  }

  .ttv-row {
    display: flex;
    flex-wrap: wrap;
    align-items: baseline;
    margin: 0.1rem 0;
    font-size: clamp(1.1rem, 2vw, 1.5rem);
    font-family: inherit;
  }
  .ttv-row-title {
    color: var(--ttv-yellow);
    font-size: clamp(1.3rem, 2.5vw, 2rem);
    font-weight: bold;
    text-transform: uppercase;
    margin-top: 0.2rem;
    margin-bottom: 0.1rem;
    letter-spacing: 0.05em;
    word-break: break-word;
    white-space: normal;
    overflow-wrap: break-word;
    width: 100%;
  }
  .ttv-repo-name {
    word-break: break-word;
    white-space: normal;
    overflow-wrap: break-word;
    width: 100%;
    display: block;
  }
  .ttv-row-desc {
    color: var(--ttv-cyan);
    font-size: clamp(1rem, 2vw, 1.3rem);
    margin-bottom: 0.2rem;
    margin-top: 0;
  }
  .ttv-label {
    color: var(--ttv-white);
    min-width: 210px;
    font-family: inherit;
    text-transform: uppercase;
    font-size: clamp(1.05rem, 2vw, 1.3rem);
    letter-spacing: 0.04em;
  }
  .ttv-value {
    font-family: inherit;
    font-size: clamp(1.05rem, 2vw, 1.3rem);
    margin-left: 0.5rem;
  }
  .ttv-yellow {
    color: var(--ttv-yellow);
  }
  .ttv-cyan {
    color: var(--ttv-cyan);
  }
  .ttv-row-warning {
    color: var(--ttv-warning-text);
    font-weight: bold;
    font-size: clamp(1.2rem, 2vw, 1.7rem);
    margin-top: 0.3rem;
    background: var(--ttv-warning-bg);
    border-top: 2px solid var(--ttv-warning-border);
    padding-top: 0.2rem;
    text-align: left;
    letter-spacing: 0.08em;
  }
  .ttv-warning {
    color: var(--ttv-warning-text);
    background: var(--ttv-warning-bg);
    padding: 0 0.2rem;
    font-family: inherit;
    text-transform: uppercase;
  }
  .ttv-row-success {
    color: var(--ttv-success-text);
    font-weight: bold;
    font-size: clamp(1.2rem, 2vw, 1.7rem);
    margin-top: 0.3rem;
    background: var(--ttv-success-bg);
    border-top: 2px solid var(--ttv-success-border);
    padding-top: 0.2rem;
    text-align: left;
    letter-spacing: 0.08em;
  }
  .ttv-success {
    color: var(--ttv-success-text);
    background: var(--ttv-success-bg);
    padding: 0 0.2rem;
    font-family: inherit;
    text-transform: uppercase;
  }
  .ttv-footer {
    margin-top: 2rem;
    text-align: center;
    color: var(--ttv-yellow);
    font-size: clamp(1rem, 2vw, 1.3rem);
    font-family: inherit;
    letter-spacing: 0.04em;
  }
  .ttv-footer-timestamp {
    color: var(--ttv-cyan);
    font-family: inherit;
  }

  .ttv-row-hours {
    width: 100%;
    justify-content: center;
    align-items: center;
    margin: 0.2em 0 0.4em 0;
    padding: 0.1em 0 0.2em 0;
    background: var(--ttv-bg);
  }
  .ttv-hours-value {
    color: var(--ttv-yellow);
    font-size: clamp(2.5rem, 6vw, 4.5rem);
    font-weight: bold;
    font-family: inherit;
    letter-spacing: 0.04em;
    text-align: center;
    padding: 0.1em 0.3em;
    line-height: 1.1;
    display: block;
    background: transparent;
    box-shadow: none;
    text-shadow: none;
  }

  @media (max-width: 600px) {
    main {
      padding: 0.2rem;
    }
    .ttv-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    .ttv-box {
      padding: 0.2rem 0.2rem 0.7rem 0.2rem;
    }
    .ttv-label {
      min-width: 120px;
      font-size: clamp(0.95rem, 2vw, 1.1rem);
    }
    .ttv-row-title {
      font-size: clamp(1.1rem, 2vw, 1.5rem);
    }
    .ttv-row-desc {
      font-size: clamp(0.9rem, 2vw, 1.1rem);
    }
  }

  .ttv-header,
  .ttv-header-title,
  .ttv-section-label,
  .ttv-box,
  .ttv-row,
  .ttv-row-title,
  .ttv-row-desc,
  .ttv-label,
  .ttv-value,
  .ttv-yellow,
  .ttv-cyan,
  .ttv-row-warning,
  .ttv-warning,
  .ttv-footer,
  .ttv-footer-timestamp,
  .ttv-hours-value {
    font-family: "Press Start 2P", "Courier New", Courier, monospace !important;
  }
</style>
